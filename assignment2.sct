scchart DDDPacemaker {
  input signal ASense, VSense, PVARP_ex, AVI_ex, AEI_ex;
  input signal URI_ex, LRI_ex, VRP_ex, R;
  output signal VPace, APace;
  output signal PVARP_start, URI_start, VRP_start;
  output signal PVARP_stop, URI_stop, VRP_stop;
  output signal AVI_start, AVI_stop;
  output signal AEI_start, AEI_stop;
  output signal LRI_start, LRI_stop;
  
  output signal URI_active;
  output signal AVI_active;
  
  
  initial state top { 	
	region URI:
	initial state idle
		--> URIConnect with VSense 
		--> URIConnect with VPace;
		
	connector state URIConnect 
		--> waitURI with /URI_start;
	
	state waitURI{
    	initial state URI_hold
    		--> exitWaitURI with URI_ex
    		--> URI_hold with / URI_active;
    	
    	final state exitWaitURI;
	}
	o-> AVIActiveConnect with VSense / URI_active
	>-> idle;
	
	connector state AVIActiveConnect
		--> waitURI with !AVI_active
		--> URIConnect with AVI_active / URI_stop;
	
	// turning on and off LRI control signals
    region LRI:

    initial state init
    	--> LRIConnector1 with VSense
    	--> LRIConnector1 with VPace;

    connector state LRIConnector1
    	--> waitVRP with / LRI_start;
	
	state waitVRP
		--> waitAVI with VRP_ex;
	
    state waitAVI
    	--> LRIConnector2 with VSense && AVI_active
    	--> LRIConnector2 with VPace && AVI_active;

    connector state LRIConnector2
    	--> intermediary with / LRI_stop;
    	
    connector state intermediary
    	--> waitVRP with /LRI_start;	  


	// control for AVI
    region AVI_PVARP:
	initial state init
		--> PVARPConnector with VPace
		--> PVARPConnector with VSense
		--> AVIInitConnect with APace
		--> AVIInitConnect with ASense
		;
	
	connector state AVIInitConnect 
		--> AVI with /AVI_start;
	
	state AVI{
	  	region AVI:
	    initial state waitAVI
	    	--> waitURI with (URI_active && AVI_ex)
	    	--> VPConnect with LRI_ex/AVI_stop
	    	--> VPConnect with (!URI_active && AVI_ex);
	    
	    state waitURI
	    	--> VPConnect with URI_ex;
	    
	    connector state VPConnect
	    	--> AVIexit with /VPace;
	    	
	    final state AVIexit;
	    
	    region AVI_Active:
	    
	    initial state waitAVI{
	    	initial state AVI_hold
	    		--> exitWaitAVI with AVI_ex
	    		--> AVI_hold with / AVI_active;
	    	
	    	final state exitWaitAVI;
		}
	    o-> exitAVIActive with VPace
	    >-> waitURI;
	    
	    state waitURI
	    	--> exitAVIActive with VPace;
	    
	    final state exitAVIActive;
	}
		o-> PVARPConnector with VSense / AVI_active
		o-> PVARPConnector with VPace && !URI_active / AVI_active
    	>-> PVARPConnector;
    
    
    connector state PVARPConnector
    	--> waitPVARP with /PVARP_start;
    
    state waitPVARP
    	--> waitAEI with PVARP_ex;
    	
    state waitAEI
    	--> AVIConnect with ASense
    	--> AVIConnect with APace;
    	
    connector state AVIConnect
    	--> AVI with /AVI_start;
    
	// control for AEI
    region AEI:

    initial state idle
    	--> AEIConnect with VSense
    	--> AEIConnect with VPace;
    	
    connector state AEIConnect
    	--> waitPVARP with / AEI_start;

    state waitPVARP
    	--> waitAEI with PVARP_ex;

    state waitAEI
    	--> idle with AEI_ex / APace
   	 	--> idle with ASense / AEI_stop;
    

	// turning on and off VRP control signals
    region VRP:

    initial state idle
    	--> IDLEConnect with VSense
    	--> IDLEConnect with VPace;
    	
    connector state IDLEConnect
    	--> waitVRP with / VRP_start;

    state waitVRP
    	--> waitAEI with VRP_ex;
    	
    state waitAEI
    	--> idle with ASense
    	-->idle with APace;

  }
  o-> top with R;

}
